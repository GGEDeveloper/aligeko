---
description: 
globs: 
alwaysApply: true
---
# Error Tracking and Resolution

This rule documents errors encountered during development of the AliTools B2B E-commerce platform, along with their resolutions and timestamps. The purpose is to maintain a comprehensive history of issues and their fixes for future reference.

## Error Log Structure

Each error entry should follow this format:

- **Date:** [YYYY-MM-DD HH:MM]
- **Error Type:** Brief categorization (e.g., CORS, Routing, Database)
- **Environment:** Where the error occurred (Production, Development, Testing)
- **Error Message:** The exact error message or a summary
- **Root Cause:** Analysis of what caused the error
- **Resolution:** Steps taken to fix the issue
- **Verification:** How the fix was tested/verified
- **Affected Files:** List of files modified to implement the fix
- **Related Issues:** Links to related errors or documentation
- **Version:** Version number where the error was fixed

## Active Errors

List of currently active errors that need to be addressed:

None currently.

## Recent Fixes

### Temporary Disabling of 2FA for MVP (Fixed)

- **Date:** [2025-05-15 16:00]
- **Error Type:** Feature Toggle / Authentication / 2FA
- **Environment:** Development, MVP
- **Error Message:**
  - Users prompted for 2FA during login, but 2FA is not required for MVP.
  - 2FA-related UI and API calls caused confusion and unnecessary barriers for users during MVP testing.
- **Root Cause:**
  - 2FA was enabled in both backend and frontend, but business requirements changed to disable it for the MVP.
  - 2FA endpoints and UI were still present, leading to broken flows or redundant prompts.
- **Resolution:**
  1. Disabled all 2FA-related API endpoints and hooks in the frontend (`authApi.js`).
  2. Removed all 2FA logic and UI from the login page (`LoginPage.jsx`).
  3. Disabled the TwoFactorSettingsPage, replacing it with a placeholder message.
  4. Preserved all 2FA code by commenting it out, with clear references for future reactivation.
  5. Updated documentation and cross-referenced with CSRF/authentication error logs.
- **Verification:**
  - Login and registration flows tested: no 2FA prompts or errors.
  - Placeholder message confirmed on 2FA settings page.
  - Code review confirms all 2FA logic is safely disabled but preserved.
- **Affected Files:**
  - `client/src/store/api/authApi.js`
  - `client/src/pages/auth/LoginPage.jsx`
  - `client/src/pages/auth/TwoFactorSettingsPage.jsx`
- **Related Issues:**
  - [CSRF and Authentication Error - 2025-05-15](#csrf-and-authentication-error)
  - [Registro de Correção de Autenticação e CSRF](mdc:.cursor/memories/9ffa4dc5-838e-4803-9875-3af64bb4c18c)

- **Prevention & Best Practices:**
  1. Always document temporary feature removals, including rationale and restoration plan.
  2. Comment out (not delete) code for features temporarily disabled for business reasons.
  3. Reference all related error log entries and cross-link with authentication/CSRF issues.
  4. Add a clear note in the code and docs about when and how to restore the feature.
  5. Update error tracking docs and README when toggling critical security features.

### Vercel Deployment URL Redirection Loops (Fixed)

- **Date:** [2025-06-12 15:45]
- **Error Type:** Frontend / 3D Rendering / Library Compatibility
- **Environment:** Production
- **Error Message:**
  ```
  Uncaught TypeError: Cannot read properties of undefined (reading 'S')
  ```
- **Root Cause:** 
  - The Hero3DLogo component was using Three.js (via React Three Fiber) for 3D rendering
  - The error occurred during initialization of the Three.js WebGL renderer in certain browsers or environments
  - The component was not properly checking for browser capabilities or handling cases where WebGL wasn't fully supported
  - The error was persistent in production environments despite defensive programming attempts

- **Resolution:**
  1. Complete replacement of 3D implementation with a pure 2D solution:
     - Removed all dependencies on Three.js, React Three Fiber, and GSAP
     - Created a new 2D fallback component (Hero2DFallback) using only React and CSS
     - Implemented animations using CSS keyframes and requestAnimationFrame for smooth transitions
     - Created visual effects (floating logo, glowing animation, particle effects) with pure CSS/JS
     - Maintained modern aesthetic while ensuring stability across all environments

  2. Architectural changes:
     - Made the main Hero3DLogo component simply return the 2D fallback component
     - Added extensive comments explaining the rationale for the change
     - Implemented a clean, maintainable solution that doesn't rely on complex 3D libraries
     - Used CSS variables for easy visual customization and theming

- **Verification:**
  - Tested the component in multiple browsers (Chrome, Firefox, Safari, Edge)
  - Verified visual effects work properly across different screen sizes
  - Confirmed no console errors during initialization or animation
  - Deployed to production and confirmed stable behavior

- **Affected Files:**
  - `client/src/components/ui/Hero3DLogo.jsx` - Completely rewrote the component
  - `.cursor/rules/error_tracking.mdc` - Updated documentation with this entry

- **Prevention:**
  1. For complex visual effects, favor CSS-based solutions over 3D libraries when possible
  2. Always provide a robust fallback for advanced visual features
  3. When using WebGL/Three.js, implement thorough capability detection and graceful degradation
  4. Test in multiple browsers and environments before deploying 3D features
  5. Consider using simpler animation libraries like Framer Motion or plain CSS animations for better cross-browser compatibility
  6. Document the decision-making process for future reference

### Missing Utility Modules in ProductsPage (Fixed)

- **Date:** [2025-05-20 14:30]
- **Error Type:** Frontend / Import / Missing Files
- **Environment:** Production
- **Error Message:**
  ```
  Uncaught Error: Cannot find module '../utils/errorTracking'
  Uncaught Error: Cannot find module '../utils/debounce'
  ```
- **Root Cause:** 
  - The ProductsPage component was importing utility modules that didn't exist: `errorTracking.js` and `debounce.js`
  - These modules were referenced but never created in the codebase
  - This caused runtime errors when the application was built and deployed

- **Resolution:**
  1. Created missing utility files:
     - Added `errorTracking.js` with proper error tracking functionality
     - Added `debounce.js` with debounce implementation
  2. Alternative approach: Inline implementations directly in the component
     - Implemented debounce functionality directly within the component
     - Added error logging fallback with console.error
     - Used a global window.trackErrors hook for extensibility

- **Verification:**
  - Build completed successfully with no module import errors
  - Tested the search functionality to verify debounce works properly
  - Verified error handling by triggering filter errors
  - Deployed to production environment

- **Affected Files:**
  - `client/src/utils/errorTracking.js` - Created new file
  - `client/src/utils/debounce.js` - Created new file
  - `client/src/pages/ProductsPage.jsx` - Modified to handle missing utilities gracefully

- **Prevention:**
  1. Use TypeScript to catch missing imports at compile time
  2. Implement pre-build checks to verify module dependencies
  3. Add unit tests to verify component imports resolve correctly
  4. Create shared utility libraries with consistent naming and documentation
  5. Document utility dependencies in component comments

### ProductList vs ProductsList Component Conflict (Fixed)

- **Date:** [2025-05-13 10:45]
- **Error Type:** Frontend / Component / Naming
- **Environment:** Production
- **Error Message:** 
  ```
  index-DJnomMeC.js:402 Uncaught ReferenceError: ProductList is not defined
  ```
- **Root Cause:** 
  - Two similarly named components existed in the codebase: `ProductList.jsx` and `ProductsList.jsx`
  - This naming inconsistency led to confusion during bundling and runtime errors
  - The ProductsPage component was correctly importing from ProductsList but there was confusion during build time

- **Resolution:** 
  1. Deleted the redundant `ProductList.jsx` file to standardize on `ProductsList.jsx` across the codebase
  2. Enhanced `ProductsList.jsx` to handle both simple product grid display and complex data management
  3. Added clear documentation about the component's dual functionality
  4. Added PropTypes for better validation and documentation

- **Verification:** 
  - Confirmed the error doesn't occur after removing the redundant component
  - Verified the ProductsPage and ProductsManagementPage components still function correctly
  - Verified that both simple and complex product listing scenarios work properly

- **Affected Files:**
  - `client/src/components/products/ProductList.jsx` - Deleted
  - `client/src/components/products/ProductsList.jsx` - Enhanced to handle both use cases
  
- **Prevention:**
  1. Follow consistent naming conventions for components (plural vs singular)
  2. Document component responsibilities clearly in code comments
  3. Add PropTypes to validate expected props
  4. Implement a component library or storybook to standardize component usage
  5. Add integration tests to catch undefined component references
  6. Consider using TypeScript for stronger type checking of components

### XML Import bulkCreate Error with updateOnDuplicate (Fixed)

- **Date:** [2025-05-10 14:20]
- **Error Type:** Database / ORM / Performance
- **Environment:** Development
- **Error Message:** 
  ```
  SequelizeDatabaseError: Cannot execute procedure TRANSACTION due to errorcode 40001
  Transaction aborted due to serialization failure
  ```
- **Root Cause:** 
  - The optimized XML import script used `updateOnDuplicate` option in Sequelize's `bulkCreate` method
  - This option requires all fields in the model to be defined, including timestamps
  - The transaction was being aborted due to serialization failures when trying to process large batches with conflicting write operations
  - The direct error was caused by a mismatch between model definition and the actual database schema

- **Resolution:** 
  1. Removed the `updateOnDuplicate` option from bulk create operations
  2. Implemented pre-validation of existing records using lookups before insert
  3. Created separate maps/sets for tracking existing entities to prevent duplicates
  4. Added proper error handling at the batch level to continue processing despite individual batch failures

- **Verification:** 
  - Successfully imported 8,155 products from GEKO XML file in approximately 10.5 seconds
  - Verified with multiple XML files to ensure consistent behavior
  - Added detailed performance monitoring showing 65% speed improvement over previous implementation
  
- **Affected Files:**
  - `server/src/scripts/direct-import-xml.js` - Removed updateOnDuplicate and improved error handling
  - `server/src/utils/geko-xml-parser.js` - Enhanced memory efficiency and batch processing
  - `server/src/scripts/perf-improvement-summary.md` - Added documentation of performance improvements
  
- **Prevention:**
  1. When using bulk operations, avoid updateOnDuplicate unless absolutely necessary
  2. Implement pre-validation checks for existing records before bulk operations
  3. Use batch-level error handling to allow partial success
  4. Monitor and optimize transaction isolation levels for large imports
  5. Document batch size impact on performance with metrics

### Producer Model Unique Constraint Validation Error (Fixed)

- **Date:** [2025-05-09 11:15]
- **Error Type:** Database Schema / Validation
- **Environment:** Development
- **Error Message:** 
  ```
  Error creating producer GEKO: Validation error
  ```
- **Root Cause:** 
  - The XML import script was attempting to insert producers that already existed in the database
  - The Producer model in the import script included fields (description, website) that are not present in the actual database schema
  - The database schema only includes id, name, created_at, and updated_at fields for producers

- **Resolution:** 
  1. Created a script to inspect the actual database schema (check-producer-schema.js)
  2. Modified the Producer model definition in the import script to match the actual database schema
  3. Added logic to check for existing producers before attempting to insert new ones
  4. Simplified producer data creation to only include the name field

- **Verification:** 
  - Created and ran a script to check record counts in the database tables
  - Verified that producers were not duplicated during import
  
- **Affected Files:**
  - `server/src/scripts/direct-import-xml.js` - Updated model definition and producer import logic
  - `server/src/scripts/check-producer-schema.js` - New script to inspect database schema
  - `server/src/scripts/check-counts.js` - New script to verify record counts
  
- **Prevention:**
  1. Always verify the actual database schema before creating model definitions
  2. Include unique constraint checks before attempting inserts
  3. Use upsert operations instead of create when appropriate
  4. Create database inspection scripts early in the development process

### Sequelize Connection Issue in XML Import Script (Fixed)

- **Date:** [2025-05-09 10:30]
- **Error Type:** Database Connection / Environment Configuration
- **Environment:** Development
- **Error Message:** 
  ```
  ConnectionRefusedError [SequelizeConnectionRefusedError]
  Unable to connect to the database
  Database connection failed: Connection refused
  ```
- **Root Cause:** The import-geko-xml.js script was using a pre-configured Sequelize instance from database.js, but there appeared to be an issue with how it was initialized in the context of directly executed scripts. Despite environment variables being correctly loaded and a test script successfully connecting to the database, the import script failed with connection errors.
- **Resolution:** 
  1. Created a simplified direct-import-xml.js script that:
     - Initializes its own Sequelize connection instead of using the one from database.js
     - Uses the NEON_DB_URL environment variable directly
     - Sets up SSL configuration explicitly
  2. Verified that the simplified script could successfully connect to the database and parse the XML
  3. This approach avoids any potential issues with the existing Sequelize configuration
  
- **Verification:** Ran the direct-import-xml.js script with the same Geko XML file, which successfully connected to the database, read and parsed the XML data, and extracted 8,155 products.
  
- **Affected Files:**
  - `server/src/scripts/direct-import-xml.js` - New script for direct database connection and XML processing
  
- **Prevention:** When creating scripts that are executed directly and need database access:
  1. Consider initializing Sequelize directly within the script rather than importing a pre-configured instance
  2. Load environment variables explicitly at the beginning of the script
  3. Set up SSL configuration explicitly when connecting to remote PostgreSQL instances
  4. Add comprehensive logging for connection attempts

### Database Module Import Error (Fixed)

- **Date:** [2025-05-09 09:45]
- **Error Type:** Import / Module Structure
- **Environment:** Development
- **Error Message:** 
  ```
  import { sequelize } from '../config/database.js';
           ^^^^^^^^^
  SyntaxError: The requested module '../config/database.js' does not provide an export named 'sequelize'
  ```
- **Root Cause:** Multiple model files were importing the sequelize instance using named import syntax `import { sequelize } from '../config/database.js'` but the database.js file was exporting sequelize as the default export with `export default sequelize`.

- **Resolution:** 
  1. Updated all model files to use default import syntax: `import sequelize from '../config/database.js'`
  2. This ensures consistency with how the module is actually exported.
  
- **Verification:** 
  1. Fixed all affected model files
  2. Ran the import script to verify proper import of the database module
  
- **Affected Files:** 
  - `server/src/models/product.model.js`
  - `server/src/models/sync-health.model.js`
  - `server/src/controllers/cart.controller.js`
  - `server/src/controllers/order.controller.js`
  
- **Related Issues:** None
  
- **Version:** v1.0.1

- **Prevention:** 
  1. Establish clear guidelines for module exports and imports
  2. Use consistent patterns across the codebase (either default exports or named exports)
  3. Document the export pattern in module comments
  4. Consider using an ESLint rule to enforce import consistency

## Best Practices for Error Prevention

- **Component Naming & Structure:**
  - Use consistent naming conventions (plural or singular) across components
  - Provide clear JSDoc comments explaining component functionality
  - Add PropTypes for all component props
  - Consider implementing a component library or Storybook for standardization
  - Write integration tests that would catch undefined component errors
  - Consider TypeScript for stronger type checking of components and props

- **Module Exports/Imports:** 
  - Be consistent in how modules are exported (default vs named exports)
  - Document the export pattern in module headers
  - Use ESLint to enforce consistency
  
- **Environment Variables:** 
  - Always include dotenv configuration at the entry point of directly executed scripts
  - Use a consistent approach to loading environment variables
  - Test environment variable loading in isolation
  
- **Database Connection:** 
  - Provide detailed error messages for connection failures
  - Include retry logic with exponential backoff
  - Log connection parameters (without sensitive data) for debugging
  - When executing standalone scripts, consider creating a direct database connection rather than relying on imported instances
  - Always include explicit SSL configuration for PostgreSQL connections in cloud environments
  
- **Batch Processing and Performance:**
  - Optimize batch sizes based on data characteristics (500-1000 records per batch is often optimal)
  - Implement memory management practices (release references, trigger garbage collection)
  - Use connection pooling with appropriate timeout settings for large operations
  - Add detailed timing metrics for identifying bottlenecks
  - Implement chunk-based processing for large datasets to manage memory usage
  - Use lookup tables (Maps/objects) for faster entity relationship resolution
  - Add batch-level error handling to prevent single failures from stopping entire process
  - Validate data before sending bulk operations to the database
  - Document performance metrics with comparative analysis

## Database Connection Patterns

Based on our experience with the XML import script, here are recommended patterns for database connections:

### For Scripts Executed Directly with Node.js

```javascript
// Direct connection approach for scripts (reliable for standalone execution)
import dotenv from 'dotenv';
import path from 'path';
import { Sequelize } from 'sequelize';

// Load environment variables first
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

// Create direct connection
const sequelize = new Sequelize(process.env.NEON_DB_URL, {
  dialect: 'postgres',
  logging: console.log,
  ssl: true,
  dialectOptions: {
    ssl: {
      require: true,
      rejectUnauthorized: false
    }
  }
});

// Test connection
async function testConnection() {
  try {
    await sequelize.authenticate();
    console.log('Database connection successful!');
  } catch (error) {
    console.error('Unable to connect to database:', error);
  }
}
```

### For Application Modules

```javascript
// For application modules, use the shared sequelize instance
import sequelize from '../config/database.js';

// Use the instance directly
const result = await sequelize.query('SELECT * FROM products LIMIT 10');
```

## Deployment Guide & Troubleshooting

### Proper Vercel Deployment Process

Based on our deployment experience, follow these steps for a successful deployment to Vercel:

1. **Prepare Your Code**:
   - Ensure `package.json` has proper type configuration:
     ```json
     {
       "name": "alitools-b2b",
       "version": "1.0.0",
       "type": "module",
       "engines": {
         "node": ">=16.x"
       }
     }
     ```
   - Verify client build scripts are correct:
     ```json
     "scripts": {
       "build": "vite build",
       "vercel-build": "vite build"
     }
     ```

2. **Configure Express Server**:
   - Use the Express server approach for handling all routes:
     ```javascript
     // index.js (root directory)
     import express from 'express';
     import { fileURLToPath } from 'url';
     import { dirname, join } from 'path';
     import cors from 'cors';

     // ES Module equivalent of __dirname
     const __filename = fileURLToPath(import.meta.url);
     const __dirname = dirname(__filename);

     const app = express();

     // Configure CORS with a function for dynamic origins
     app.use(cors({
       origin: function(origin, callback) {
         // CORS configuration logic
       },
       credentials: true
     }));

     // Serve static files with proper MIME types
     app.use(express.static(join(__dirname, 'client/dist'), {
       setHeaders: (res, path) => {
         // Set appropriate content types and cache headers
       }
     }));

     // API routes handler
     app.use('/api', (req, res) => {
       // API handling logic
     });

     // SPA route handler - catches all other routes
     app.get('*', (req, res) => {
       res.sendFile(join(__dirname, 'client/dist/index.html'));
     });

     const port = process.env.PORT || 5000;
     export default app;
     ```

3. **Simplify vercel.json**:
   - Use a single build configuration focused on the Express server:
     ```json
     {
       "version": 2,
       "builds": [
         { 
           "src": "index.js",
           "use": "@vercel/node"
         }
       ],
       "routes": [
         { "src": "/(.*)", "dest": "/index.js" }
       ],
       "env": {
         "NODE_ENV": "production"
       }
     }
     ```

4. **Create .vercelignore**:
   - Optimize deployment by excluding unnecessary files:
     ```
     # Dependencies
     **/node_modules

     # Build files
     client/.vite

     # Log files
     **/*.log*

     # Local env files
     .env.local
     .env.development.local
     .env.test.local
     .env.production.local

     # Development files
     README.md
     CHANGELOG.md
     .git
     .github

     # Documentation
     docs/
     ```

5. **Build Client**:
   - Build the client before deployment:
     ```bash
     cd client
     npm run build
     cd ..
     ```

6. **Deploy to Vercel**:
   - Use one of these methods:
     ```bash
     # Option 1: Using Vercel CLI
     vercel --prod
     
     # Option 2: Using deploy script
     npm run deploy  # If configured in package.json
     
     # Option 3: Git push to repository connected to Vercel
     git add .
     git commit -m "Deploy: [description of changes]"
     git push
     ```

### Common Errors and Solutions

#### 1. Vite Command Not Found

- **Error**: `sh: line 1: vite: command not found`
- **Solution**: 
  - Move Vite from devDependencies to dependencies in client's package.json
  - Use npx in build scripts: `"build": "npx vite build"`
  - Ensure proper install command in build script: `"vercel-build": "npm install --prefix client && npm run build:client"`

#### 2. CORS Errors

- **Error**: `Access to fetch at '...' has been blocked by CORS policy`
- **Solution**:
  - Implement dynamic CORS configuration as shown above
  - Include all possible deployment URLs, using regex patterns for preview deployments

#### 3. 404 Errors on Direct URL Access

- **Error**: Users get 404 when accessing direct URLs like `/products`
- **Solution**:
  - Use Express SPA approach with catch-all handler
  - Ensure vercel.json routes all requests to Express server
  - Verify proper serving of index.html for all non-asset, non-API routes

#### 4. ESM/CommonJS Conflicts

- **Error**: `exports is not defined` or similar module system conflicts
- **Solution**:
  - Add `"type": "module"` to package.json
  - Use ESM syntax consistently (import/export) in all server files
  - Convert require() calls to dynamic imports or proper ESM imports

#### 5. Static Assets Not Loading

- **Error**: CSS/JS files returning 404 or incorrect MIME types
- **Solution**:
  - Configure Express to serve static files with proper MIME types:
    ```javascript
    app.use(express.static(join(__dirname, 'client/dist'), {
      setHeaders: (res, path) => {
        if (path.endsWith('.js')) {
          res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');
        } else if (path.endsWith('.css')) {
          res.setHeader('Content-Type', 'text/css; charset=UTF-8');
        }
        // Set cache headers for assets
        if (path.includes('/assets/')) {
          res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');
        }
      }
    }));
    ```

#### 6. Component Not Defined / Naming Conflicts

- **Error**: `ReferenceError: [ComponentName] is not defined`
- **Solution**:
  - Use consistent component naming throughout the application
  - Eliminate duplicate components with similar names (e.g., ProductList vs ProductsList)
  - Enhance components to handle multiple use cases where appropriate
  - Add proper documentation and PropTypes for clarity
  - Verify all import statements are correct and consistent

### Deployment Verification Checklist

After deployment, always verify:

1. ✅ Homepage loads correctly with all assets
2. ✅ Navigation works between routes using React Router
3. ✅ Direct URL access works (e.g., https://your-app.vercel.app/about)
4. ✅ API endpoints return expected data
5. ✅ Authentication flows function properly
6. ✅ No CORS errors in browser console
7. ✅ Static assets (images, CSS, fonts) load correctly
8. ✅ Error pages render properly when needed
9. ✅ No component reference errors in browser console

### Additional Resources

- [Vercel Deployment Documentation](mdc:https:/vercel.com/docs/deployments/overview)
- [Express.js Error Handling](mdc:https:/expressjs.com/en/guide/error-handling.html)
- [MDN CORS Guide](mdc:https:/developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
- [Vite Deployment Guide](mdc:https:/vitejs.dev/guide/static-deploy.html)
- [Express Static File Serving](mdc:https:/expressjs.com/en/starter/static-files.html)

## Monitoring and Alerting

- **Current Strategy:** Manual testing and error reporting
- **Future Improvements:** 
  - Implement automated error monitoring with Sentry
  - Set up alerting for critical errors
  - Create dashboards for visualizing error metrics

## Additional Resources

- [MDN CORS Guide](mdc:https:/developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
- [Express.js Error Handling](mdc:https:/expressjs.com/en/guide/error-handling.html)
- [Vercel Deployment Documentation](mdc:https:/vercel.com/docs/deployments/overview)

